@page "{id:int}"
@model TaskTracker.Pages.Tasks.EditModel
@{
    ViewData["Title"] = "Edit Task";
}

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-warning text-dark">
            <h4 class="mb-0">✏️ Edit Task</h4>
        </div>

        <div class="card-body">
            <form method="post">
                <input type="hidden" asp-for="TaskItem.ProjectId" />
                <input type="hidden" asp-for="TaskItem.TaskItemId" />

                <div class="mb-3">
                    <label asp-for="TaskItem.Title" class="form-label fw-semibold">📌 Title</label>
                    <input asp-for="TaskItem.Title" class="form-control" placeholder="Update task title" />
                    <span asp-validation-for="TaskItem.Title" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="TaskItem.Status" class="form-label fw-semibold">📊 Status</label>
                    <select asp-for="TaskItem.Status" class="form-select">
                        <option>Pending</option>
                        <option>In Progress</option>
                        <option>Completed</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label asp-for="TaskItem.DueDate" class="form-label fw-semibold">📅 Due Date</label>
                    <input asp-for="TaskItem.DueDate" type="date" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold">🔎 Search Location</label>
                    <input id="searchInput" class="form-control" type="text" placeholder="Search for a place..." />
                </div>

                <div class="mb-3">
                    <div id="map" style="height: 400px;" class="rounded shadow-sm"></div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">📍 Latitude</label>
                        <input type="number" step="any" id="Latitude" name="TaskItem.Latitude" value="@Model.TaskItem.Latitude" class="form-control" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">📍 Longitude</label>
                        <input type="number" step="any" id="Longitude" name="TaskItem.Longitude" value="@Model.TaskItem.Longitude" class="form-control" />
                    </div>
                </div>
                <div class="mb-3">
                    <label asp-for="TaskItem.Address" class="form-label">📍 Address</label>
                    <input type="hidden" name="TaskItem.Address" id="Address" value="@Model.TaskItem.Address" />
                    <small class="text-muted d-block mt-2">📍 <strong>Selected Address:</strong> <span id="addressPreview" class="fw-semibold">@Model.TaskItem.Address</span></small>

                </div>


                <div class="d-flex justify-content-between mt-4">
                    <a asp-page="/Projects/Details" asp-route-id="@Model.TaskItem.ProjectId" class="btn btn-outline-secondary">
                        ← Cancel
                    </a>
                    <button type="submit" class="btn btn-warning text-white fw-semibold">Update Task</button>
                </div>
            </form>
        </div>
    </div>
</div>

@inject IConfiguration Configuration

<script src="https://maps.googleapis.com/maps/api/js?key=@Configuration["GoogleMaps:ApiKey"]&libraries=places&callback=initMap" async defer></script>

<script>let map, marker;

    function initMap() {
        const latInput = document.getElementById("Latitude");
        const lngInput = document.getElementById("Longitude");
        const addressInput = document.getElementById("Address");
        const addressPreview = document.getElementById("addressPreview");

        const initialLat = parseFloat(latInput.value) || 39.8283;
        const initialLng = parseFloat(lngInput.value) || -98.5795;

        const initialLocation = { lat: initialLat, lng: initialLng };

        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 5,
            center: initialLocation,
        });

        marker = new google.maps.Marker({
            map: map,
            position: initialLocation
        });

        fetchAddress(initialLat, initialLng);

        map.addListener("click", e => {
            const lat = e.latLng.lat();
            const lng = e.latLng.lng();
            marker.setPosition(e.latLng);
            latInput.value = lat;
            lngInput.value = lng;
            fetchAddress(lat, lng);
        });

        const input = document.getElementById("searchInput");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();
            if (!place.geometry) return;

            const lat = place.geometry.location.lat();
            const lng = place.geometry.location.lng();

            map.setCenter(place.geometry.location);
            map.setZoom(14);
            marker.setPosition(place.geometry.location);

            latInput.value = lat;
            lngInput.value = lng;
            const address = place.formatted_address || "Unknown";
            addressInput.value = address;
            addressPreview.innerText = address;
        });
    }

    async function fetchAddress(lat, lng) {
        const apiKey = "AIzaSyAPFdh8o3EQ1EzQ0gvS8m8DH5yU-3BvrwU";
        const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${apiKey}`;
        const response = await fetch(url);
        const data = await response.json();

        if (data.status === "OK" && data.results.length > 0) {
            const address = data.results[0].formatted_address;
            document.getElementById("Address").value = address;
            document.getElementById("addressPreview").innerText = address;
        }
    }</script>
}
